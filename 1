****Demonstrate  basic DDL and DML statements********

show datbases;

create database xyzdb;

use xyzdb;

#####creating table

create table customer(ID int primary key,Name varchar(50) not null,age int not null);


#######shows the property of the columns and tables
desc customer; 

##### for inserting 
insert into customer values(123 ,"vidit",54);



###to show the table 

select*from customer;

#####to select particular columns 
select Id, Name from customer;


###using condition

select*from customer where age=53;

#####alter table (change modoify the columns characteristics)

alter table customer modify column age numeric(4);


*****Practical No 2*********

Aim: Demonstrate DML statements, Aggregate functions, OrderBy and Group By Operations

 create table studnet(Stud_id char(5) primary key, first_name varchar(
40) not null, last_name varchar(20) ,DOB date, Gender Varchar(1), Email_Id varchar(100));

create table teacher(Teach_id char(5) primary key, first_name varchar(40) not null, last_name varchar(20) ,DOB date, Gender Varchar(1), Email_Id varchar(100));

##Fees where receipt_no is primary key and stud_id is foreign key
 create table fees(Reciept_no int(6) primary key , Stud_id char(5) , amount char(18),foreign key (Stud_id) references Studnet(Stud_id));


1. Write a query to insert record of a new student ‘Cathy’ in student table

insert into student values(1,"Rahul","Khan","2001-09-13","M","rahul@gmail.com");


4. Write a query to update last name of teacher ‘Carol’ to ‘Pereira’ in the teacher
table

update teacher SET Lastname="pereira" where Firstname="carol";

5. Write a query to delete the record for the fee receipt ‘R3’

delete from fees where Reciept_no="R3";

6. Create a table StudCopy from the table Student, with student name and email id

create table StudentCopy AS select Firstname,Last name , email_id from Student;

7. Delete the table Fees from database

drop table fees;

*****************ORDERBY*******************(alphabetical Order)

select*from student order by DOB DESC;

select*from student order by DOB ASC;

***********GROUPBY***************

● Write a query to count how many employees work in each
department

select department , count(*) from employeetb group by department;

● Write a query to find maximum salary of employees in
each department

select department , max(salary) from employeetb groupby department;

● Write a query to find minimum salary of employees in
each department

select department , min(salary) from employeetb groupby department;

● Write a query to get total salary budget of every
department

select department , sum(salary) as total_salary_budget from employeetb groupby department;

**********AGGREGATE FUCTIONS***************

create table employees(Emp_Id int(9), emp_name varchar(20) , emp_sal
int(20));

insert into employees values(123 ,"Vidit",3987);

select*from employees;

1. Write a query to count total Employees in your table

select count(*)
Select count(*) from employees;

2. Write a query to count the employees having salary greater than 15000

Select count(*) from employees where empsalary>5000;


3. Write a query to count the unique names of your employees

Select count(distinct empname ) from employees;


4. Write a query to find maximum salary

select max(empsalary) from employees;

5. Write a query to find minimum salary

select min(empsalary) from employees;


6. Write a query to find average salary

select avg(empsalary) from employees;


7. Write a query to find total salary paid

select sum(empsalary) from employees;





**********JOINS*************

Employee table

Eid:int primary key,
Ename: varchar(25) not null ,
DOB: date not null
Address: varchar(50)
Salary: int default=1500
Dept_id: integer not null foreign key references Department(Did)
Eid Ename DOB Address Salary Dept_id
1 Thomas 1995-02-05 Andheri 48800 11
2 Steve 1990-08-16 Kandivali Default
value
13
3 Daisy 1992-12-25 churchgate 50000 11
4 Lawrence 1991-10-15 Mahim 28000 13



Department:
Did: int primary key
Dname: Varchar(10) not null
Did Dname
11 CS
13 IT

create table departmenttb(Did int primary key, Dname Varchar(10) not null);
insert into department values(11, 'cs), (13,'IT');
Perform the following Join queries:
1. Demonstrate join operation

SELECt*from employeetable join departments on deptId=Did;

2. Demonstrate left outer join operation

SELECt*from employeetable left outer join departments on deptId=Did;

3. Demonstrate right outer join operation

SELECt*from employeetable right outer join departments on deptId=Did;

4. Demonstrate full join operation

SELECt*from employeetable full join departments on deptId=Did;

5. Demonstrate cross join operation

SELECt*from employeetable cross join departments on deptId=Did;


6. Write a query to display names of Employees who work in ‘IT’ Department

select enames from employeestable join departments on deptID where Dname="IT";




*************subqueries***********************

b) Create the given 3 tables:
1. Sailors1 table:
SID SNAME

RATING AGE
1 Prathamesh 8 48
2 Rohit 9 39
3 ADAMS 10 29
4 Deb 6 30


2. Boats table:
BID BNAME COLOR
11 ABC red
12 PQR yellow
13 ZMR green
14 MRF black


3. Reserves table:
SID BID DAY
1 11 wednesday
2 12 thursday
3 13 friday
4 14 Saturday

1. Find the names of sailors who have reserved boat 13?

select S.sname FROM Sailors1 S where S.sid IN(select R.sid FROM Resrves R R.bid=13);

2. Find the names of sailors who have not reserved boat 13?

select S.sname FROM Sailors1 S where S.sid NOT IN(select R.sid FROM Resrves R R.bid=13);

3. Find the names of sailors who have reserved a red boat?

select S.sname FROM Sailors1 S where S.sid  IN(select R.sid FROM Resrves R where R.bid IN (SELECT B.bid FROM BOATS B WHERE B.color='red'));

4. Find the names of sailors who have not reserved a red boat?

select S.sname FROM Sailors1 S where S.sid IN(select R.sid FROM Resrves R where R.bid NOT IN (SELECT B.bid FROM BOATS B WHERE B.color='red'));

5. Find the names of sailors who are older than the oldest sailor with the
rating of 10?

select S.sname FROM Sailors1 S where S.age>(select max(s.age) FROM Sailors S where rating=10);





#############################HBASE###################################



Open terminal in cloudera

to work in hdfs environment 
0Query:ls 
hdfs dfs -ls
or 
hadoop fs

1. To open HBase shell
Query:hbase shell

2. To list the tables currently present
Query:list

3. Create table customer in HBase
Query: create ‘customer’, ‘Customer_info’, ‘Customer_contact_details’

4. Display description of table
Query: describe ‘customer’

5. Insert data in table
Query:put ‘customers’, ‘1’, ‘cust_info:first_name’,’Vidit’
put ‘customers’, ‘1’, ‘cust_info:last_name’, ‘Kaloya’
put ‘customers’, ‘1’, ‘cust_info:address’, ‘Vidit’

put ‘customers’, ‘1’, ‘cust_contact_details:mobile’, ‘93748947333’
put ‘customers’, ‘1’, ‘cust_contact_details:email’, vidit.k@gmail.com’

get
6. Display the data

Query: scan ‘customer’

7. Display first row id
Query: get ‘customer’, ‘1’

8. Upsert - will update the data and if missing it will insert the new value UPDATE
Query: put ‘customers’, ‘1’, ‘cust_contact_details:email’, ‘vk@gmail.com’

9. Delete a column
Query: delete ‘customers’, ‘1’, ‘cust_info:address’

10.Deleting all columns corresponding to an ID 

Query:deleteall 'customer','2'

11. Truncate table

Query:truncate 'customer'

12. Disable the table

disable 'customer'

13. To enable

enable 'customer'

14. To delete table permanently from hbase

disable 'customer'
drop 'customer'


##################################HIVE####################################
